import groovy.io.FileType

import javax.crypto.Cipher
import javax.crypto.SecretKey
import javax.crypto.spec.IvParameterSpec
import javax.crypto.spec.SecretKeySpec

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

ext {
    // Whether the theme assets should be encrypted or not,
    // this makes it harder for pirates and kangers! (DEFAULT: true)
    SHOULD_ENCRYPT_ASSETS = true

    // Whether this theme supports third party theme systems, we will not be able to help you debug
    // your themes on external theming systems, so the team will NOT respond to external systems if
    // there are issues with your theme (DEFAULT: false)
    SUPPORTS_THIRD_PARTY_SYSTEMS = false

    // Encryption values, do not touch as we generate a random key every time you compile!
    final byte[] key = new byte[16]
    new Random().nextBytes(key)
    KEY = key
    final byte[] iv = new byte[16]
    new Random().nextBytes(iv)
    IV_KEY = iv
}

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'

    defaultConfig {
        // If you're planning to change up the package name, ensure you have read the readme
        // thoroughly!
        applicationId "substratum.theme.template"
        // We are only supporting Nougat and above, all new changes will incorporate Nougat changes
        // to the substratum repo rather than anything lower. Keep targetSdkVersion the same.
        minSdkVersion 24
        targetSdkVersion 26
        // Both versions must be changed to increment on Play Store/user's devices
        versionCode 1
        versionName "1.0"

        // Themers: Do not touch this, they will only formulate integrity structure of the core
        //          template
        buildConfigField "String", "IV_KEY", "\"" + IV_KEY + "\""
        buildConfigField "byte[]", "DECRYPTION_KEY", String.valueOf("\"" + KEY + "\"")
                .replace("\"", "")
                .replace("[", "{")
                .replace("]", "}")
        buildConfigField "byte[]", "IV_KEY", String.valueOf("\"" + IV_KEY + "\"")
                .replace("\"", "")
                .replace("[", "{")
                .replace("]", "}")
        buildConfigField "boolean", "SUPPORTS_THIRD_PARTY_THEME_SYSTEMS", "" +
                SUPPORTS_THIRD_PARTY_SYSTEMS
        resValue "bool", "SUPPORTS_THIRD_PARTY_THEME_SYSTEMS", "" + SUPPORTS_THIRD_PARTY_SYSTEMS
        resValue "string", "encryption_status", (shouldEncrypt() ? "onCompileVerify" : "false")

        ndk {
            moduleName "LoadingProcess"
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            // When you compile an APK as release, your resources and IV keys will be safeguarded
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
    externalNativeBuild {
        ndkBuild {
            path 'src/main/jni/Android.mk'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.github.javiersantos:PiracyChecker:1.1'
    compile("org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version") {
        transitive = true
    }
}

// Themers, do not touch this! This is our function to help us encrypt your assets!
task encryptAssets {
    if (!shouldEncrypt()) {
        println("Skipping assets encryption...")
        return
    }

    final def tempAssets = new File(getProjectDir(), "/src/main/assets-temp")
    if (!tempAssets.exists()) {
        println("Encrypting duplicated assets, don't worry, your original assets are safe...")
        final def list = []
        final def dir = new File(getProjectDir(), "/src/main/assets")
        dir.eachFileRecurse(FileType.FILES) { final file ->
            list << file

            final FileInputStream fis = new FileInputStream(file)
            final File fo = new File(file.getAbsolutePath().replace("assets", "assets-temp"))
            fo.getParentFile().mkdirs()
            final FileOutputStream fos = new FileOutputStream(fo)
            final byte[] buffer = new byte[4096]
            int n
            while ((n = fis.read(buffer)) != -1) {
                fos.write(buffer, 0, n)
            }
            fis.close()
            fos.close()
        }

        list.each {
            if (it.getAbsolutePath().contains("overlays")) {
                final Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding")
                final SecretKey secret = new SecretKeySpec(KEY, "AES")
                final IvParameterSpec iv = new IvParameterSpec(IV_KEY)

                cipher.init(Cipher.ENCRYPT_MODE, secret, iv)
                final FileInputStream fis = new FileInputStream(it)
                final FileOutputStream fos = new FileOutputStream(it.getAbsolutePath() + ".enc")

                final byte[] input = new byte[64]
                int bytesRead
                while ((bytesRead = fis.read(input)) != -1) {
                    byte[] output = cipher.update(input, 0, bytesRead)
                    if (output != null) {
                        fos.write(output)
                    }
                }
                final byte[] output = cipher.doFinal()
                if (output != null) {
                    fos.write(output)
                }
                fis.close()
                fos.flush()
                fos.close()

                it.delete()
            }
        }
    } else {
        throw new RuntimeException("Old temporary assets found! Try and do a clean project.")
    }
}

project.afterEvaluate {
    preBuild.dependsOn encryptAssets
}

gradle.buildFinished {
    final def tempAssets = new File(getProjectDir(), "/src/main/assets-temp")
    if (tempAssets.exists()) {
        println("Cleaning duplicated encrypted assets, not your decrypted assets...")
        final def encryptedAssets = new File(getProjectDir(), "src/main/assets")
        encryptedAssets.deleteDir()

        tempAssets.eachFileRecurse(FileType.FILES) { final file ->
            final FileInputStream fis = new FileInputStream(file)
            final File fo = new File(file.getAbsolutePath().replace("assets-temp", "assets"))
            fo.getParentFile().mkdirs()
            final FileOutputStream fos = new FileOutputStream(fo)
            final byte[] buffer = new byte[4096]
            int n
            while ((n = fis.read(buffer)) != -1) {
                fos.write(buffer, 0, n)
            }
            fis.close()
            fos.close()
        }
        tempAssets.deleteDir()
    }
}

boolean shouldEncrypt() {
    final ArrayList<String> tasks = project.gradle.startParameter.taskNames
    return SHOULD_ENCRYPT_ASSETS && Arrays.toString(tasks).toLowerCase().contains("release")
}

repositories {
    mavenCentral()
}